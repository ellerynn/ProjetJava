/*
        //TYPECOURSDAO recuperation du nom
        DAO<TypeCours> typecoursDAO = new TypeCoursDAO();
        TypeCours lol = typecoursDAO.find(5);
        System.out.println("le type de cours : "+ lol.getNom());
        System.out.println("***********************************1");
        
        //PromotionDAO recuperation du nom
        DAO<Promotion> promotionDAO = new PromotionDAO();
        Promotion pro = promotionDAO.find(2);
        System.out.println("la promo : "+ pro.getNom());
        System.out.println("***********************************2");
        
        //SITEDAO recuperation du nom
        DAO<Site> siteDAO = new SiteDAO();
        Site sit = siteDAO.find(2);
        System.out.println("le site : "+ sit.getNom());
        System.out.println("***********************************3");
        
        //COURSDAO recuperation du nom
        DAO<Cours> coursDAO = new CoursDAO();
        Cours cou = coursDAO.find(2);
        System.out.println("le cours : "+ cou.getNom());
        System.out.println("***********************************4");
        
        //UTILISATEURDAO recuperation de toutes les données
        UtilisateurDAO utilisateurDAO = new UtilisateurDAO();
        Utilisateur uti = utilisateurDAO.find("etudiant3@edu.ece.fr","etudiant");

        System.out.println("l'id : "+ uti.getId());
        System.out.println("le mail : "+ uti.getEmail());
        System.out.println("le password : "+ uti.getPassword());
        System.out.println("le nom : "+ uti.getNom());
        System.out.println("le prenom : "+ uti.getPrenom());
        System.out.println("le droit : "+ uti.getDroit());
        System.out.println("***********************************5");

        //GROUPEDAO recuperation de toutes les données
        DAO<Groupe> groupeDAO = new GroupeDAO();
        Groupe gro = groupeDAO.find(4);
        System.out.println("l'id du groupe : "+ gro.getId());
        System.out.println("le nom du groupe : "+ gro.getNom());
        Promotion promo = gro.getPromotion();
        System.out.println("l'id de la promotion du groupe : "+ promo.getId());
        System.out.println("le nom de la promotion du groupe : "+ promo.getNom());
        System.out.println("***********************************6");
        
        //SALLEDAO recuperation de toutes les données
        DAO<Salle> salleDAO = new SalleDAO();
        Salle sal = salleDAO.find(4);
        System.out.println("l'id de la salle : "+ sal.getId());
        System.out.println("le nom de la salle : "+ sal.getNom());
        Site site = sal.getSite();
        System.out.println("la capacite de la salle : "+ sal.getCapacite());
        System.out.println("le nom de la promotion du groupe : "+ site.getNom());
        System.out.println("***********************************7");
        
        //ENSEIGNANTDAO recuperation de toutes les données
        DAO<Enseignant> enseignantDAO = new EnseignantDAO();
        Enseignant ens = enseignantDAO.find(16);
        System.out.println("l'id de l'enseignant : "+ ens.getId());
        System.out.println("l'id : "+ ens.getId());
        System.out.println("le mail : "+ ens.getEmail());
        System.out.println("le password : "+ ens.getPassword());
        System.out.println("le nom : "+ ens.getNom());
        System.out.println("le prenom : "+ ens.getPrenom());
        System.out.println("le droit : "+ ens.getDroit());

        ArrayList<Cours> couurs = ens.getCours();
        for (int i = 0 ; i < couurs.size() ; i++){
            System.out.println("le cours qu'à le prof: "+ couurs.get(i).getNom());
        }
        System.out.println("***********************************8");
        
        //SEANCEDAO recuperation de toutes les données
        DAO<Seance> seanceDAO = new SeanceDAO();
        Seance sea = seanceDAO.find(1);

        System.out.println("l'id de la seance : "+ sea.getId());
        System.out.println("la semaine : "+ sea.getSemaine());
        System.out.println("l'heure de début : "+ sea.getHeureDebut());
        System.out.println("l'heure de fin : "+ sea.getHeureFin());
        System.out.println("l'etat : "+ sea.getEtat());

        System.out.println("l'id du cours : "+ (sea.getCours()).getId());
        System.out.println("l'id du type cours : "+ (sea.getTypeCours()).getId() );

        Cours cours2 = sea.getCours();
        TypeCours types2 = sea.getTypeCours();
        System.out.println("le cours: "+ cours2.getNom());
        System.out.println("le type de cours: "+ types2.getNom());

        System.out.println("le/les professeurs:");
        for (int i = 0 ; i < sea.getEnseignants().size(); i++){
            System.out.println(  (sea.getEnseignants().get(i)).getNom());
        }
        System.out.println("Le/les groupes:");
        for (int i = 0 ; i < sea.getGroupes().size(); i++){
            System.out.println(  (sea.getGroupes().get(i)).getNom());
        }
        System.out.println("Le/les salles (+site)");
        for (int i = 0 ; i < sea.getSalles().size(); i++){
            System.out.println("Salle: "+(sea.getSalles().get(i)).getNom());
            System.out.println("Localisé à : "+(sea.getSalles().get(i)).getSite().getNom());
        }

        System.out.println("***********************************9");
        
        //ETUDIANTDAO recuperation de toutes les données
        DAO<Etudiant> etudiantDAO = new EtudiantDAO();
        Etudiant etu = etudiantDAO.find(4);
        System.out.println("l'id de l'etudiant : "+ etu.getId());
        System.out.println("le numero de l'etudiant : "+ etu.getNumero());
        System.out.println("l'ID du groupe de l'etudiant : "+ etu.getGroupe().getId());


        Groupe groupe = etu.getGroupe();
        System.out.println("l'id du groupe dans table groupe: "+ groupe.getId());
        System.out.println("***********************************10");

        //*************************UPDATE ***************
        //Par exemple cours, en reprenant un cours déjà créer dans le main (et son dao aussi dj créer)
        cou.setNom("Maths");
        cou = coursDAO.update(cou); // Avant c't Analyse, mtn c'est Maths
        System.out.println("le cours : "+ cou.getNom());
        System.out.println("***********************************4UPDATE");

	/**************************UPDATE COURS***************/
            //Par exemple cours, en reprenant un cours déjà créer dans le main (et son dao aussi dj créer)
            cou.setNom("Maths");
            cou = coursDAO.update(cou); // Avant c't Analyse, mtn c'est Maths
            System.out.println("la cours update : "+ cou.getNom());
            System.out.println("***********************************UPDATE COURS");
            /**************************UPDATE PROMOTION***************/
            //Par exemple promotion, en reprenant un promotion déjà créer dans le main (et son dao aussi dj créer)
            pro.setNom("Ing1");
            pro = promotionDAO.update(pro); 
            System.out.println("la promotion update : "+ pro.getNom());
            System.out.println("***********************************UPDATE PROMOTION");
             /**************************UPDATE SITE***************/
            //Par exemple site, en reprenant un site déjà créer dans le main (et son dao aussi dj créer)
            sit.setNom("Eiffel 1");
            sit = siteDAO.update(sit); 
            System.out.println("le site update : "+ sit.getNom());
            System.out.println("***********************************UPDATE SITE");
             /**************************UPDATE TYPESCOURS***************/
            //Par exemple typescours, en reprenant un typescours déjà créer dans le main (et son dao aussi dj créer)
            lol.setNom("TD");
            lol = typecoursDAO.update(lol); 
            System.out.println("le type de cours update : "+ lol.getNom());
            System.out.println("***********************************UPDATE Type de Cours");
            
            /**************************UPDATE SALLE***************/
            //Par exemple salle, en reprenant un salle déjà créer dans le main (et son dao aussi dj créer)
            sal.setNom("002");
            sal.setCapacite(25);
            sal = salleDAO.update(sal); 
            System.out.println("l'id de la salle : "+ sal.getId());
            System.out.println("le nom de la salle update : "+ sal.getNom());
            System.out.println("la capacite de la salle : "+ sal.getCapacite());
            
            System.out.println("le nom du site : "+ site.getNom());
            System.out.println("***********************************UPDATE SALLE");
            /**************************UPDATE Groupe***************/
            //Par exemple groupe, en reprenant un groupe déjà créer dans le main (et son dao aussi dj créer)
            gro.setNom("TD05");
            gro = groupeDAO.update(gro); 
            System.out.println("l'id du groupe : "+ gro.getId());
            System.out.println("le nom du groupe update : "+ gro.getNom());
            
            System.out.println("le nom de la promotion du groupe : "+ promo.getNom());
            System.out.println("***********************************UPDATE Groupe");

        //*************************RECHERCHE*************
        //**Un Lambda cherche Seance par semaine ******
        System.out.println("*********Recherche les séances pour un User et une semaine:*********"); //Marche pour prof et étudiant
        ArrayList<Seance> mesSeancesOnWeek = new ArrayList<>();
        SeanceDAO scDAO = new SeanceDAO();
        int semaine = 1;
        int userID = 11;
        mesSeancesOnWeek = scDAO.findSeancesByUserAndWeek(userID,semaine); //Si on connait le nom de l'user, on connait l'id de l'Utilisateur car sinon la personne n'existe pas
        System.out.println("EDT semaine : " + semaine + " de l'user "+ userID);
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < mesSeancesOnWeek.size() ; i++) //Pour chaque séance de cette semaine de ce prof :
        {
           System.out.println("----------------------------------:");
           System.out.println("Cours en cours de validation/valider/annuler : "+ mesSeancesOnWeek.get(i).getEtat()); 
           //Faudra trier en fct de getEtat(), si on veut afficher que ceux annuler
           System.out.println("la date : "+ mesSeancesOnWeek.get(i).getDate());
           System.out.println("Heure debut: "+  mesSeancesOnWeek.get(i).getHeureDebut());
           System.out.println("Heure fin: "+  mesSeancesOnWeek.get(i).getHeureFin());

           for (int a = 0 ; a < mesSeancesOnWeek.get(i).getSalles().size() ; a++) //Les salles
           {
               System.out.println("Salle :"+ mesSeancesOnWeek.get(i).getSalles().get(a).getNom());
               System.out.println("Le site de cette salle : "+ mesSeancesOnWeek.get(i).getSalles().get(a).getSite().getNom());
           }

           System.out.println("cours de : "+ mesSeancesOnWeek.get(i).getCours().getNom());
           System.out.println("Type de cours :"+ mesSeancesOnWeek.get(i).getTypeCours().getNom());

           for (int a = 0; a< mesSeancesOnWeek.get(i).getEnseignants().size(); a++) //Les profs
           {
               System.out.println("Prof qui anime : "+mesSeancesOnWeek.get(i).getEnseignants().get(a).getNom());
           }
           for (int a = 0; a< mesSeancesOnWeek.get(i).getGroupes().size(); a++) //Les groupes
           {
               System.out.println("TD présent : "+mesSeancesOnWeek.get(i).getGroupes().get(a).getNom());
               System.out.println("Appartient à promo :"+ mesSeancesOnWeek.get(i).getGroupes().get(a).getPromotion().getNom());
           }
        }

        System.out.println("\n*********Recherche les séances pour un Groupe et une semaine:*********"); //Si on connait le TD, on connait l'id du Groupe car sinon on connait pas groupe
        //SeanceDAO est dj créé dans une des simulations
        ArrayList<Seance> seancesByTD = new ArrayList<>();
        int semaine1 = 1;
        int groupeID = 1;
        seancesByTD = scDAO.findSeancesByGroupAndWeek(groupeID, semaine1);
        System.out.println("EDT semaine : " + semaine1 + " du groupe "+ groupeID);
        System.out.println(seancesByTD.size() +" a/ont été trouvé(s) [Pour extraire données, voir exemple de mesSeancesOnWeek]");
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < seancesByTD.size() ; i++)
        {
            System.out.println("Seance d'id : "+ seancesByTD.get(i).getId()+"\n");

        }

        System.out.println("\n*********Recherche les séances pour une promotion et une semaine:*********"); //Si on connait la promo, on connait l'id de la Promo car sinon on connait pas la promo
        ArrayList<Seance> seancesByPromo = new ArrayList<>();
        int semaine2 = 1;
        int promoID = 2;
        seancesByPromo = scDAO.findSeancesByPromoAndWeek(promoID, semaine2);
        System.out.println("EDT semaine : " + semaine2 + " de la promo "+ promoID);
        System.out.println(seancesByPromo.size() +" a/ont été trouvé(s) [Pour extraire données, voir exemple de mesSeancesOnWeek]");
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < seancesByPromo.size() ; i++)
        {
            System.out.println("Seance d'id : "+ seancesByPromo.get(i).getId());

        }
        System.out.println("\n*********Recherche edt d'une salle (occupés ou/et annulés) et une semaine:*********"); ///Il s'agit d'afficher les horaires occupés/annulés
        ArrayList<Seance> seancesBySalle = new ArrayList<>();
        int semaine3 = 1;
        int salleID = 3;
        seancesBySalle = scDAO.findSeancesBySalle(salleID, semaine3);
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < seancesBySalle.size() ; i++) //Pour chaque séance de cette semaine de ce prof :
        {
            //System.out.println("Occupée ou annulée (getEtat()) : "+ seancesBySalle.get(i).getEtat()); 
            System.out.println("Salle occopé par la seance d'id : "+ seancesBySalle.get(i).getId());
            System.out.println("Pour des exemples d'extraction d'autres données, se référer à la partie mesSeancesOnWeek");
        }

        UtilisateurDAO uDAO= new UtilisateurDAO();
        System.out.println("\n*********NBTotal*********\nLe nombre total de gens dans cette école : "+uDAO.nombreMax()+ " ouai c'pas bcp :/");
        
        /**************************UPDATE COURS***************
        //Par exemple cours, en reprenant un cours déjà créer dans le main (et son dao aussi dj créer)
        cou.setNom("Maths");
        cou = coursDAO.update(cou); // Avant c't Analyse, mtn c'est Maths
        System.out.println("la cours update : "+ cou.getNom());
        System.out.println("***********************************UPDATE COURS");
        /**************************UPDATE PROMOTION***************
        //Par exemple cours, en reprenant un cours déjà créer dans le main (et son dao aussi dj créer)
        pro.setNom("Ing1");
        pro = promotionDAO.update(pro); 
        System.out.println("la promotion update : "+ pro.getNom());
        System.out.println("***********************************UPDATE PROMOTION");
         /**************************UPDATE SITE***************
        //Par exemple cours, en reprenant un cours déjà créer dans le main (et son dao aussi dj créer)
        sit.setNom("Eiffel 1");
        sit = siteDAO.update(sit); 
        System.out.println("le site update : "+ sit.getNom());
        System.out.println("***********************************UPDATE SITE");
         /**************************UPDATE TYPESCOURS***************
        //Par exemple cours, en reprenant un cours déjà créer dans le main (et son dao aussi dj créer)
        lol.setNom("TD");
        lol = typecoursDAO.update(lol); 
        System.out.println("le type de cours update : "+ lol.getNom());
        System.out.println("***********************************UPDATE Type de Cours");

        /*************************RECHERCHE*************
        /***Un Lambda cherche Seance par semaine ******
        System.out.println("*********Recherche les séances pour un User et une semaine:*********"); //Marche pour prof et étudiant
        ArrayList<Seance> mesSeancesOnWeek = new ArrayList<>();
        SeanceDAO scDAO = new SeanceDAO();
        int semaine = 1;
        int userID = 11;
        mesSeancesOnWeek = scDAO.findSeancesByUserAndWeek(userID,semaine); //Si on connait le nom de l'user, on connait l'id de l'Utilisateur car sinon la personne n'existe pas
        System.out.println("EDT semaine : " + semaine + " de l'user "+ userID);
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < mesSeancesOnWeek.size() ; i++) //Pour chaque séance de cette semaine de ce prof :
        {
           System.out.println("----------------------------------:");
           System.out.println("Cours en cours de validation/valider/annuler : "+ mesSeancesOnWeek.get(i).getEtat()); 
           //Faudra trier en fct de getEtat(), si on veut afficher que ceux annuler
           System.out.println("la date : "+ mesSeancesOnWeek.get(i).getDate());
           System.out.println("Heure debut: "+  mesSeancesOnWeek.get(i).getHeureDebut());
           System.out.println("Heure fin: "+  mesSeancesOnWeek.get(i).getHeureFin());

           for (int a = 0 ; a < mesSeancesOnWeek.get(i).getSalles().size() ; a++) //Les salles
           {
               System.out.println("Salle :"+ mesSeancesOnWeek.get(i).getSalles().get(a).getNom());
               System.out.println("Le site de cette salle : "+ mesSeancesOnWeek.get(i).getSalles().get(a).getSite().getNom());
           }

           System.out.println("cours de : "+ mesSeancesOnWeek.get(i).getCours().getNom());
           System.out.println("Type de cours :"+ mesSeancesOnWeek.get(i).getTypeCours().getNom());

           for (int a = 0; a< mesSeancesOnWeek.get(i).getEnseignants().size(); a++) //Les profs
           {
               System.out.println("Prof qui anime : "+mesSeancesOnWeek.get(i).getEnseignants().get(a).getNom());
           }
           for (int a = 0; a< mesSeancesOnWeek.get(i).getGroupes().size(); a++) //Les groupes
           {
               System.out.println("TD présent : "+mesSeancesOnWeek.get(i).getGroupes().get(a).getNom());
               System.out.println("Appartient à promo :"+ mesSeancesOnWeek.get(i).getGroupes().get(a).getPromotion().getNom());
           }
        }

        System.out.println("\n*********Recherche les séances pour un Groupe et une semaine:*********"); //Si on connait le TD, on connait l'id du Groupe car sinon on connait pas groupe
        //SeanceDAO est dj créé dans une des simulations
        ArrayList<Seance> seancesByTD = new ArrayList<>();
        int semaine1 = 1;
        int groupeID = 1;
        seancesByTD = scDAO.findSeancesByGroupAndWeek(groupeID, semaine1);
        System.out.println("EDT semaine : " + semaine1 + " du groupe "+ groupeID);
        System.out.println(seancesByTD.size() +" a/ont été trouvé(s) [Pour extraire données, voir exemple de mesSeancesOnWeek]");
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < seancesByTD.size() ; i++)
        {
            System.out.println("Seance d'id : "+ seancesByTD.get(i).getId()+"\n");

        }

        System.out.println("\n*********Recherche les séances pour une promotion et une semaine:*********"); //Si on connait la promo, on connait l'id de la Promo car sinon on connait pas la promo
        ArrayList<Seance> seancesByPromo = new ArrayList<>();
        int semaine2 = 1;
        int promoID = 2;
        seancesByPromo = scDAO.findSeancesByPromoAndWeek(promoID, semaine2);
        System.out.println("EDT semaine : " + semaine2 + " de la promo "+ promoID);
        System.out.println(seancesByPromo.size() +" a/ont été trouvé(s) [Pour extraire données, voir exemple de mesSeancesOnWeek]");
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < seancesByPromo.size() ; i++)
        {
            System.out.println("Seance d'id : "+ seancesByPromo.get(i).getId());

        }
        System.out.println("\n*********Recherche edt d'une salle (occupés ou/et annulés) et une semaine:*********"); ///Il s'agit d'afficher les horaires occupés/annulés
        ArrayList<Seance> seancesBySalle = new ArrayList<>();
        int semaine3 = 1;
        int salleID = 3;
        seancesBySalle = scDAO.findSeancesBySalle(salleID, semaine3);
        System.out.println("Les seances sont rangés par date et heure: ");
        for (int i = 0 ; i < seancesBySalle.size() ; i++) //Pour chaque séance de cette semaine de ce prof :
        {
            //System.out.println("Occupée ou annulée (getEtat()) : "+ seancesBySalle.get(i).getEtat()); 
            System.out.println("Salle occopé par la seance d'id : "+ seancesBySalle.get(i).getId());
            System.out.println("Pour des exemples d'extraction d'autres données, se référer à la partie mesSeancesOnWeek");
        }

        UtilisateurDAO uDAO= new UtilisateurDAO();
        System.out.println("\n*********NBTotal*********\nLe nombre total de gens dans cette école : "+uDAO.nombreMax()+ " ouai c'pas bcp :/");
        /*Fenetre fenetre = new Fenetre();
            
        try {
            ConnexionBDD c = new ConnexionBDD("edt","root","");
            System.out.println("BDD identifiée");
        }
        catch(SQLException sql){
           System.out.println("exception");
        }
        catch(ClassNotFoundException tm) {
           System.out.println("class exception");
        }*/

public static void exempleRecapitulationDesSeances()
    {   
        int id = 16;
        String dateDebut = "2020-05-15";
        String dateFin = "2020-06-05";
        SeanceDAO sDAO = new SeanceDAO();
        
        ArrayList<ArrayList<Seance>> seances = sDAO.findSeancesOfUserByDate(id, dateDebut, dateFin);
        
        for (int i = 0 ; i < seances.size() ; i++)
        {
            System.out.println("******************************************");
            System.out.println("Matiere - Public:");
            String nom = seances.get(i).get(0).getCours().getNom();
            for (int a = 0; a<seances.get(i).get(0).getGroupes().size(); a++)
            {
                nom += " "+seances.get(i).get(0).getGroupes().get(a).getNom();
                nom += "-"+seances.get(i).get(0).getGroupes().get(a).getPromotion().getNom();
            }
            System.out.println(nom);
            System.out.println("Premiere séance:");
            System.out.println(seances.get(i).get(0).getDate() + " de "+ seances.get(i).get(0).getHeureDebut() +" à "+ seances.get(i).get(0).getHeureFin());
            System.out.println("Dernière séance:");
            int dernier = seances.get(i).size()-1;
            System.out.println(seances.get(i).get(dernier).getDate() + " de "+ seances.get(i).get(dernier).getHeureDebut() +" à "+ seances.get(i).get(dernier).getHeureFin());
            System.out.println("Nb");
            System.out.println(dernier+1);
            System.out.println("SI ON CLIQUE SUR L'ICONE PLUS DE DETAIL:");
            int heure = 0;
            int minute = 0;
            String duree = new String();
            for (int a = 0 ; a < seances.get(i).size() ; a++)
            {
                duree = seances.get(i).get(a).calculDuree(); //On récupère la durée de la séance i
                System.out.println(seances.get(i).get(a).getDate() + " de "+ seances.get(i).get(a).getHeureDebut() +" à "+ seances.get(i).get(a).getHeureFin() + " ("+duree +")");
                int pos = duree.indexOf('h'); //Première occurence de la lettre h de la durée
                heure += Integer.parseInt(duree.substring(0,pos)); //On somme tout les heures
                minute += Integer.parseInt(duree.substring(pos+1,duree.length())); //On somme tout les minutes
            }
            duree = seances.get(i).get(0).orderingHour(heure+"h"+minute); //On appel n'importe que séance, nous souhaitons juste ranger les heures/minutes
            System.out.println("Durée globale:");
            System.out.println(duree);
        }
    }
    public static void exempleCreationSeance()
    {
        //Déclaration des DAOs:
        SeanceDAO sDAO = new SeanceDAO();
        TypeCoursDAO tDAO = new TypeCoursDAO();
        CoursDAO cDAO = new CoursDAO();
        EnseignantDAO eDAO = new EnseignantDAO();
        GroupeDAO gDAO = new GroupeDAO();
        SalleDAO salleDAO = new SalleDAO();
        //Variables issus des saisies de l'utilisateur dans l'interface graphique:
        int Semaine = 1;
        String HeureDebut = "18:00:00";
        String HeureFin = "19:00:00";
        String Date = "2020:05:20";
        int CoursID = 1; //Si l'user voit le nom d'une matière, ça veut dire qu'on l'avait récup de la BDD, donc ID connu avec getID()
        int TypeID = 5; //Si l'user voit le nom d'une matière, ça veut dire qu'on l'avait récup de la BDD, donc ID connu avec getID()
        int EnseignantID = 17; // Faudra bien vérifier si l'enseignant enseigne ce cours
        int GroupeID = 2; //
        int GroupeBIS = 1; //On peut avoir 2 groupes par exemple
        int SalleID = 1; //
        
        
        //Création de ma séance
        Seance seance = new Seance(Semaine,HeureDebut,HeureFin,Date,cDAO.find(CoursID),tDAO.find(TypeID));
        seance.ajouterEnseignant(eDAO.find(EnseignantID));
        seance.ajouterGroupe(gDAO.find(GroupeID));
        seance.ajouterGroupe(gDAO.find(GroupeBIS));
        seance.ajouterSalle(salleDAO.find(SalleID));
        //On le stock dans la BDD
        seance = sDAO.create(seance);
        //On regarde si on a tout
        /*
        System.out.println("ID de la matiere: "+ seance.getCours().getId());
        System.out.println("ID animateur(s) (j'en ai affiché qu'un: "+ seance.getEnseignants().get(0).getNom());
        System.out.println("ID des groupe présent (J'en ai qu'affiché qu'un) : "+ seance.getGroupes().get(0).getId());
        System.out.println("ID de la salle (J'en ai qu'affiché qu'un): "+ seance.getSalles().get(0).getId());
        */
    }
    //MODULE MAJ(Mise a Jour)/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
    * MODULE MAJ N°1 AFFECTER UN ENSEIGNANT A UNE SEANCE
*/
    public void AffecterEnseignantSeance(int id_seance, int id_enseignant) {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);
        
        if(!seance.getEnseignants().isEmpty()){// Si il est pas vide, il y a des enseignants donc pas d'affectation
            System.out.println("L'enseignant que vous essayez d'affecter ne peut être affecter car un enseignant est deja affecte, veuillez AJOUTER un enseignant");
        }
        else{
            if(sDAO.isTeacherNotFreeForThisSeance(id_enseignant, seance)){//METHODE N°14 DANS SEANCEDAO
                System.out.println("Impossible d'affecter cet enseignant à cette séance car il est deja attitre dans ce créneau");
            }else{
                    sDAO.insertInJonction(id_seance, id_enseignant, 1);//METHODE N°18 DANS SEANCEDAO
                    System.out.println("L'enseignant a bien été affecté à cette séance ! ");
            }         
        }    
    }
   
/*
    * MODULE MAJ N°2  AFFECTER UN GROUPE A UNE SEANCE
*/
    
    public void AffecterGroupeSeance(int id_seance, int id_groupe) {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);
        
        if(!seance.getGroupes().isEmpty()){//Si il est pas vide, ce n'est pas une affectation
            System.out.println("Le groupe que vous essayez d'affecter ne peut pas etre affecter.");
        }
        else{
            if(sDAO.isGroupNotFreeForThisSeance(id_groupe, seance)){//METHODE N°13 DANS SEANCEDAO
                System.out.println("Impossible de rajouter ce groupe car un cours est deja attitre dans ce créneaux");
            }else{
                if(seance.placeInTotal() >= sDAO.find_capacite_groupes_total(id_groupe, id_seance)){//METHODE N°16 DANS SEANCEDAO
                    sDAO.insertInJonction(id_seance, id_groupe, 2);//METHODE N°18 DANS SEANCEDAO
                    System.out.println("Le groupe a bien été ajouté à cette seance ! ");
                }else{System.out.println("Le nombre d'eleves dans le groupe depasse la capacité maximale de la seance");}
            }         
        }    
    }
  
/*
    * MODULE MAJ N°3 MODIFIER LE NOM DU COURS
*/
    
    public void ModifierSeanceCoursNom(int id_seance, int id_cours) {
        CoursDAO cDAO = new CoursDAO();
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance2 = sDAO.find(id_seance);
        seance2.setCours(cDAO.find(id_cours));
        seance2 = sDAO.update(seance2);
    }
    
/*
    * MODULE MAJ N°3 MODIFIER LE TYPE DU COURS
*/
    
    public void ModifierSeanceCoursType(int id_seance, int id_type) {
        TypeCoursDAO tDAO = new TypeCoursDAO();
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance2 = sDAO.find(id_seance);
        seance2.setTypeCours(tDAO.find(id_type));
        seance2 = sDAO.update(seance2);
    }
    
/*
    * MODULE MAJ N°4 AFFECTER UNE SALLE A UNE SEANCE
*/
  
    public void AffecterSalleSeance(int id_seance, int id_salle) {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);

        if(!seance.getSalles().isEmpty()){ //si des salles sont dj affecté à la séance, on affecte pas
            System.out.println("La salle que vous essayez d'affecter ne peut pas etre affecter.");
        }
        else{
            if(sDAO.isSalleNotFreeForThisSeance(id_salle, seance)){ //METHODE N°15 DANS SEANCEDAO
                System.out.println("Impossible d'affecter cet salle à cette séance car il est deja attitre dans ce créneau");
            }else{

                SalleDAO salledao = new SalleDAO();
                Salle salle = salledao.find(id_salle);

                if(salle.getCapacite() >= sDAO.find_capacite_groupes_total(0,id_seance)){ //METHODE N°17 DANS SEANCEDAO
                    sDAO.insertInJonction(id_seance, id_salle, 3); //METHODE N°18 DANS SEANCEDAO
                    System.out.println("La salle a bien été affecté à cette séance ! ");
                }else{System.out.println("Le nombre d'eleves pour cette seance depasse la capacité maximale de la seance, veuillez affecter une salle avec une capacité plus grande");}         
            }         
        }    
    }
    /*
    * MODULE MAJ N°4 AJOUT SALLE A UNE SEANCE (EN PLUS)
    */
    public void AjouterSalleSeance(int id_seance, int id_salle)
    {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);
        //Mettre condition de si pas ajouter
        if (!seance.getSalles().isEmpty()) //Si c'est pas vide, si vide appellée la fonction affectation
        {
            if(sDAO.canIAjouterSalleSeance(seance,id_salle)) //Créneau et duplication: no pblm
            {
                sDAO.insertInJonction(id_seance, id_salle, 3);//METHODE N°18 DANS SEANCEDAO
            }
        }
    }
/*
    * MODULE MAJ N°5 DEPLACER UNE SEANCE DE COURS //Même quand ça déplace sur lui même, ça marche
*/
    
    public void DeplacerSeance(int id_seance,int Semaine, String Date, String Heure_Debut, String Heure_Fin, int Etat, int id_salle) {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);
        seance.setSemaine(Semaine);
        seance.setDate(Date);
        seance.setHeureDebut(Heure_Debut);
        seance.setHeureFin(Heure_Fin);
        seance.setEtat(Etat);
        seance.getSalles().clear(); //déplacer .... "dans UNE salle libre" -> Toute les salles dj présent disparaissent
        SalleDAO saDAO = new SalleDAO();
        seance.ajouterSalle(saDAO.find(id_salle)); //On récupère la salle, on l'add
        boolean isOk = true;
        for (int i = 0 ; i < Math.max(seance.getSalles().size(),Math.max(seance.getEnseignants().size(),seance.getGroupes().size()));i++)
        {
            if(i < seance.getSalles().size() && sDAO.isSalleNotFreeForThisSeance(seance.getSalles().get(i).getId(),seance))
            {
                isOk = false;
                System.out.println("Salles non dispo");
                i = 1000;
            }
                
            if(i < seance.getEnseignants().size() && sDAO.isTeacherNotFreeForThisSeance(seance.getEnseignants().get(i).getId(), seance) )
            {
                isOk = false;
                System.out.println("Enseignants non dispo");
                i = 1000;
            }
            if(i < seance.getGroupes().size() && sDAO.isGroupNotFreeForThisSeance(seance.getGroupes().get(i).getId(), seance))
            {
                isOk = false;
                System.out.println("groupes non dispo");
                i = 1000;
            }
        }
        if(seance.placeInTotal() < sDAO.find_capacite_groupes_total(0, id_seance))//METHODE N°16 DANS SEANCEDAO
        {
            isOk = false;
            System.out.println("Salle trop petit");
        }
        if (isOk == true)
        {
            seance = sDAO.update(seance); //Si tout ce qui est en haut est ok, on update tout
            System.out.println("Deplacer avec succes");
        }
            
        
    }
    
/*
    * MODULE MAJ N°6 AJOUTER UNE SEANCE
*/
    
    public void AjouterSeance(int Semaine, String Date, String Heure_Debut, String Heure_Fin, int Etat, int ID_cours,int ID_type, ArrayList<Integer> idGroupes, ArrayList<Integer> idEnseignants, ArrayList<Integer> idSalles) 
    {
        SeanceDAO sDAO = new SeanceDAO();
        CoursDAO cDAO = new CoursDAO();
        TypeCoursDAO tDAO = new TypeCoursDAO();
        GroupeDAO gDAO = new GroupeDAO();
        EnseignantDAO eDAO = new EnseignantDAO();
        SalleDAO salleDAO = new SalleDAO();
        Cours c = cDAO.find(ID_cours);
        TypeCours t = tDAO.find(ID_type);
        Seance seance = new Seance(Semaine, Heure_Debut, Heure_Fin,Date, Etat, c, t);
        boolean okForCreate = true;
        //On ajoute les salles en accord avec leur créneau dispo sans vérif la capa car rien à vérifier au début
        for (int i = 0 ; i < idSalles.size();i++)
        {
            if (sDAO.canIAjouterSalleSeance(seance, idSalles.get(i)))
            {
               seance.ajouterSalle(salleDAO.find(idSalles.get(i))); 
            }
            else{
                okForCreate = false;
                i = 100; // Dès qu'il y a un false on arrête tout
            }
        }
        if(okForCreate) //Si les vérifs des salles sont bon, on continu
        {
            for (int i = 0; i <Math.max(idGroupes.size(), idEnseignants.size()); i++) // Pour éviter 2 for
            {
                if (i< idGroupes.size())
                {
                    
                    if (sDAO.canIAjoutGroupeSeance(seance, idGroupes.get(i)))
                    {//Si groupes non duplication/pbl crénaux /Pas de pbl de place, tout est bon
                        seance.ajouterGroupe(gDAO.find(idGroupes.get(i)));
                    }
                    else
                    {
                        okForCreate = false;
                    }
                }
                if (i<idEnseignants.size())
                {
                    if ( sDAO.canIAjouterEnseignantSeance(seance, idEnseignants.get(i)))
                    {//Si enseignants non duplication/pbl crénaux tout est bon
                        seance.ajouterEnseignant(eDAO.find(idEnseignants.get(i)));
                    }
                    else{
                        okForCreate = false;
                    }
                }
            }
        }
        if (okForCreate) //Si il y a eu un faux, on ne create pas.
        {
            seance = sDAO.create(seance);
            System.out.println("Ajouter avec succes");
        }else{
            System.out.println("La seance n'a pas été ajouté");
        }
    }
    
/*
    * MODULE MAJ N°7 AJOUTER UN ENSEIGNANT A UNE SEANCE
*/
  
    public void AjouterEnseignantSeance(int id_seance, int id_enseignant)
    {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);
        if(sDAO.canIAjouterEnseignantSeance(seance,id_enseignant))
        {
            sDAO.insertInJonction(id_seance, id_enseignant, 1);//METHODE N°18 DANS SEANCEDAO
        }
    }
    
/*
    * MODULE MAJ N°8  AJOUT D'UN GROUPE A UNE SEANCE
*/
    
    public void AjoutGroupeSeance(int id_seance, int id_groupe)
    {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance = sDAO.find(id_seance);
        if(sDAO.canIAjoutGroupeSeance(seance, id_groupe))
        {
            sDAO.insertInJonction(id_seance, id_groupe, 2);//METHODE N°18 DANS SEANCEDAO
        }
    }
    
    
/*
    * MODULE MAJ N°9 ANNULER UNE SEANCE
*/
    
    public void AnnulerSeance (int id_seance)
    {
        DAO<Seance> seanceDAO = new SeanceDAO();
        Seance sea = seanceDAO.find(id_seance);
        sea.setEtat(3);
        sea = seanceDAO.update(sea);
    }
    
/*
    * MODULE MAJ N°10 VALIDER UNE SEANCE
*/
    
    public void ValiderSeance (int id_seance){
        SeanceDAO seanceDAO = new SeanceDAO();
        Seance sea = seanceDAO.find(id_seance); 
        //LES CONDITIONS
        if( (!sea.getEnseignants().isEmpty()) && (!sea.getGroupes().isEmpty())){
            sea.setEtat(2);
            sea = seanceDAO.update(sea);//METHODE UPDATE DANS SEANCEDAO
            System.out.println("C'est fait votre séance a été validée");
        }
        else{System.out.println("On ne peux pas valider cette séance car il faut au minimum un enseignant et un groupe");} 
    }
    
/*
    * MODULE MAJ N°11 ENLEVER UN GROUPE D'UNE SEANCE
*/
    
    public void EnleverGroupeSeance(int id_seance, int id_groupe) {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance2 = sDAO.find(id_seance);
        //LES CONDITIONS
        if(!seance2.getGroupes().isEmpty()) //Si des groupes sont dans cette séance
        {
            if(seance2.getGroupes().size()>1){ // Si le nombre de groupe est sup à 1
                sDAO.DeleteInJonction(id_seance, id_groupe, 2);//METHODE N°12 DANS SEANCEDAO
                System.out.println("Le groupe a été enlevée, la séance est toujours disponible !");
            }
            if(seance2.getGroupes().size()==1){
                sDAO.DeleteInJonction(id_seance, id_groupe, 2);//METHODE N°12 DANS SEANCEDAO
                seance2.setEtat(1);
                sDAO.update(seance2);
                System.out.println("Le groupe a été enlevée, la seéance est en cours de validation !");
            }
        }
        else{
            System.out.println("Il n'y a pas de groupe à enlever dans seance_groupes!");
        }
    }
   
/*
    * MODULE MAJ N°11 ENLEVER UN ENSEIGNANT D'UNE SEANCE
*/
    
    public void EnleverEnseignantSeance(int id_seance, int id_enseignant) {
        SeanceDAO sDAO = new SeanceDAO();
        Seance seance2 = sDAO.find(id_seance);
        
        //LES CONDITIONS 
        if(!seance2.getEnseignants().isEmpty()){ //S'il y a des enseignants
            if(seance2.getEnseignants().size()>1){
                sDAO.DeleteInJonction(id_seance, id_enseignant, 1);//METHODE N°12 DANS SEANCEDAO
                System.out.println("L'enseignant a été enlevée, la séance est toujours disponible !");
            }
            if(seance2.getEnseignants().size()==1){
                sDAO.DeleteInJonction(id_seance, id_enseignant, 1);//METHODE N°20 DANS SEANCEDAO
                seance2.setEtat(1);
                sDAO.update(seance2);
                System.out.println("L'enseignant a été enlevée, la séance est en cours de validation !");
            }  
        }else{
            System.out.println("Il n'y a pas d'enseignant à enlever dans seance_enseignants!");
        }  
    }
    
   //FIN DU MODULE MAJ ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  

test du main

        //controle.AffecterEnseignantSeance(1,16);
        //controle.AffecterGroupeSeance(1,5);
        //controle.ModifierSeanceCoursNom(1,2);
        //controle.ModifierSeanceCoursType(1,4);
        //controle.AffecterSalleSeance(1,3);
        //controle.AjouterSalleSeance(1,4); en plus
        //controle.DeplacerSeance(1, 2, "2020-05-15", "13:45:00", "15:15:00", 1, 3);
        //controle.AjouterSeance(1, "2020-05-15", "13:45:00", "15:15:00", 1, 1, 1, new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
        //controle.AjouterEnseignantSeance(1,16);
        //controle.AjoutGroupeSeance(1,5);
        //controle.AnnulerSeance(1);
        //controle.ValiderSeance(3);
        //controle.EnleverGroupeSeance(1, 5);
        //controle.EnleverEnseignantSeance(1, 17);
    